---
title: "Spatial Data"

execute: 
  warning: false
  message: false
---

Spatial statistics is a huge area with many methods.  This is a short introduction.
![](./img/maps.png){fig-alt="Six maps of Asia, the world, Spain, an area of US. All of varying colours and styles."}

Examples of various maps created in R and published on [R-bloggers](https://www.r-bloggers.com/).

# IQ Data

## First a simple lm model

We will use country IQ data from [Hassall and Sherratt's (2011) paper](https://doi.org/10.1016/j.intell.2011.05.001). Use this [simplified form of the data](./data/IQData.txt). Save in your data folder in your R project.

Read in the data:
```{r}
IQData <- read.table(file = "data/IQData.txt", header = TRUE)
head(IQData)
```

Note that there are countries, their corresponding IQ, possible explanatory variables for IQ and longitude and latitude. 

<br>

We can run a lm model to see if nutrition and disease predict the IQ of a country.
```{r}
model1 <- lm(IQ ~ log(Disease) + log(Nutrition), data=IQData)
summary(model1)
```

<details>
  <summary>**Why disease and nutrition is logged**</summary>

During data exploration, plots reveal `Disease` and `Nutrition` to be skewed:
```{r}
hist(IQData$Disease)
hist(IQData$Nutrition)
```


Taking the log of the data makes it more normally distributed: 
```{r}
hist(log(IQData$Disease))
hist(log(IQData$Nutrition))
```


This may improve the fit of the model.

</details>

<br>

**Challenge**

Identify the parts of the summary output that tell you what the effect of `Disease` and `Nutrition` is on `IQ`.

<details>
  <summary>**Answer**</summary>
You could look at the p values under `Pr(>|t|)`. For `log(Disease)` it is <2e-16 suggesting significance. For `log(Nutrition)` it is 0.568 suggesting non significance. You may also look at the `Estimate` and `Adjusted R-squared`.
</details>

<br>

So we conclude IQ is predicted by disease but not nutrition!  Or is it...?  Since this dataset is spatial it is likely to have the problem of **autocorrelation**!

<button type="button" class="btn btn-success">

**Spatial autocorrelation** is where samples that are geographically closer to each other are more likely to be similar to each other. They are more likely to have similar values if measured.
  
</button>

<br>

## Assessing Autocorrelation

Spatial autocorrelation can be measured using **Moran's I** (I the letter not 1 the number). 

<br>

### Correlograms

We can use the function `spline.correlog()` in the package `ncf` to create a **correlogram**. This helps us decide if we have autocorrelation. 

Install and library load the `ncf` package.

```{r}
#| eval: false
install.packages("ncf") 
```

```{r}
#| eval: true
library(ncf) 
```


<br>

Make an object called `correlog_object` containing information to plot a correlogram.
```{r}
correlog_object <- spline.correlog(IQData$Longitude, IQData$Latitude, residuals(model1), resamp=0, latlon=TRUE)
plot(correlog_object)
```

<details>
  <summary>**Explanation of code**</summary>
* `spine.correlog()` is the function
* `IQData$Longitude` and `IQData$Latitude` are the numbers the function used to calculate distances between countries
* `residuals(model1)` is a list of the residuals from the lm model. This represents the data.
* `resamp=0` tells R to do the calculation once. Try increasing this number (for example, `resamp = 100`) and plotting to see a confidence interval.
* `latlon=TRUE` tells R the co-ordinates are latitude and longitude. 
* `plot(correlog_object)` passes the newly created object through the `plot()` function to make a correlogram graph.
</details>

<br> 

### Interpreting the correlogram
On the x axis, are the distances between countries (calculated from latitude and longitude). Moran's I values are on the y axis labelled `Correlation`. There are high values (positive ad negative) if the data is very similar, low values closer to 0 if it is not. 

* there **is no** spatial autocorrelation if the values of Moran's I varies no matter what the distance
* there **is** spatial autocorrelation if Moran's I values are higher for countries closer together (i.e. lower distance apart).

We possibly have spatial autocorrelation! (Moran's I values are high on the left of the graph.) 

Adding the error to the graph (by doing iterations with `resamp=10`) helps us determine where Moran's I values really do differ from 0.

```{r}
correlog_object <- spline.correlog(IQData$Longitude, IQData$Latitude, residuals(model1), resamp=10, latlon=TRUE)
plot(correlog_object)
```
The error on the left of the graph which represents countries close together still suggests correlation.


<br>

### moran.test

In addition we can establish if there is autocorrelation by running the `moran.test()` in package `spdep`. It gives us a p value that suggests if the data is randomly dispersed.

Load the package
```{r}
#| eval: true
#| warning: false
library(spdep)
```

First we must create a matrix of distances and weight them: 
```{r}
IQnb <- dnearneigh(as.matrix(IQData[9:10]), 0, 10000,longlat=TRUE) 

IQlistw <- nb2listw(IQnb) 
```
<details>
  <summary>**Explanation of code**</summary>
* `dnearneigh()` is a function
* `as.matrix` means our object will be a matrix
* `IQData[9:10]` specifies columns 9 and 10 where the longitude and latitude values are.
* `0, 10000` specify the lower and upper bounds of the distance class of interest (1 â€“ 10000km is nearly global)
* `IQlistw` is an object we create ready to pass through the `moran.test()`
* `nb2listw` is a function that turns our neighbourhood `IQnb` object into a weighted list
</details>

<br>

Now perform the moran test:
```{r}
result <- moran.test(residuals(model1), listw=IQlistw) 
result
```

The p value suggests there is a difference in the Moran I's values as the distances change. We use this result along with the correlogram to decide that there is autocorrelation in this case.

<br>

## Mapping the Data

Maps may help us understand why data is autocorrelated.


**Challenge**

Install and library load the package `ggplot2` and `ggmap` containing the `world` dataset which is the coordinates of a simple world map. 
Then pass the `world` dataset through the map_data function and assign it as an object that you call `world`.

<details>
  <summary>**Answer**</summary>
```{r}
#| eval: false
install.packages("ggmap")
```

```{r}
#| eval: true
#| warning: false
library(ggmap) 
world <- map_data("world") 
```
</details>

<br>

Now plot world using ggplot.

```{r}
worldmap <- ggplot(world, aes(x=long, y=lat, group=group)) +
  geom_path()
worldmap
```


We can plot the residuals of our `model1` on top of this simple map of the world, to see where the spatial autocorrelation occurs.
```{r}
worldmap + 
  geom_point(data = IQData, aes(Longitude, Latitude, color = ifelse(resid(model1) >= 0, "blue", "red"),
                                         group = Continent, 
                                         size=abs(resid(model1))/max(resid(model1))*3)) +
  theme(legend.position = "none")
```

<details>
  <summary>**Explanation of code**</summary>
* `aes(Longitude, Latitude,` the position of the residuals. Here given as longitude and latititude.
* `color =` tells what colours to make the points. Here positive and negative residuals are blue and red respectively. Uses the ifelse function.
* `size=` tells R how big to make the circles. Here we use the proportional size of the residuals relative to the the biggest (max) residual.
</details>

<br> 

The large blue circles on the map are where the countries are most similar. There is also negative correlation where the big red circles are.

<br>

Another way to visualise why there is a autocorrelation problem, is to plot IQ and disease according to the continent of the country (similar to Figure 1 from [Hassall and Sherratt, 2011](https://reader.elsevier.com/reader/sd/pii/S0160289611000572?token=7B8DFAD8896C1FBA0AA9B2EF7ACA41509969C6894A95E31DF179E376D3DAEEFADD3E503B5D1366C185330CEDBC41FFB3&originRegion=eu-west-1&originCreation=20220902125737)): 

```{r}
#| warning: false
ggplot(IQData, aes(x=log(Disease), y=IQ, group = Continent)) + 
geom_point(aes(color=Continent))
```


You can see the data clusters by continent.

<br>

## Models for Spatial Data

Having established that we need to account for the spatial autocorrelation, we can run a model. However, there are many models to choose from.

<button type="button" class="btn btn-success">

If you need to analyse spatial data you will need to spend time looking into the most appropriate method. For more guidance try Bivand et al. (2013) [Applied Spatial Data Analysis in R](https://asdar-book.org/)  or Pebesma and Bivand (2022) [Spatial Data Science online book](https://keen-swartz-3146c4.netlify.app/)

</button>

<br>

As an example, we will use a GLS (Generalized Least Squares) model to show how spatial data is included in the model code to account for spatial autocorrelation.

<br>

### GLS models 

The function `gls()` in the `nlme` package will run a GLS  model.
```{r}
#| warning: false
library(nlme)
```

`gls()` uses similar code to lm but the argument `correlation=` allows the latitude and longitude data to be included. R will automatically create a spatial correlation structure to include in the model using the longitude and latitude values.
```{r}
#| eval: false
model2 <- gls(IQ ~ log(Disease) + log(Nutrition), data=IQData, correlation=corExp(form=~Longitude+Latitude)) 
summary(model2)
```

In the correlation argument we have specified the spatial structure of our data to be `corExp` in the `correlation=` argument. However, there are [many options](https://stat.ethz.ch/R-manual/R-devel/library/nlme/html/corClasses.html) with `corExp`, `corGaus`, `corLin`, `corRatio`, and `corSpher` most commonly used for spatial autocorrelation.

<button type="button" class="btn btn-success">

It is common for there to be many options to choose from in arguments when running analyses. Be prepared to dedicate time to reading about functions and their arguments so you can confidently decide which is best for your data. 

</button>

<br>

## Evaluating models with AICs

One way we could choose which spatial structure option to use, is to run many models with the different options and evaluate the fit of the models. We can evaluate them using an **AIC** value (this can be used on all sorts of models not just gls models).

Run the models with the different structures `corExp`, `corGaus`, `corLin`, `corRatio`, and `corSpher`:
```{r}
model_corExp <- gls(IQ ~ log(Disease) + log(Nutrition), data=IQData, correlation=corExp(form=~Longitude+Latitude)) 
model_corGaus <- gls(IQ ~ log(Disease) + log(Nutrition), data=IQData, correlation=corGaus(form=~Longitude+Latitude)) 
model_corLin <- gls(IQ ~ log(Disease) + log(Nutrition), data=IQData, correlation=corLin(form=~Longitude+Latitude)) 
model_corRatio <- gls(IQ ~ log(Disease) + log(Nutrition), data=IQData, correlation=corRatio(form=~Longitude+Latitude))
model_corSpher <- gls(IQ ~ log(Disease) + log(Nutrition), data=IQData, correlation=corSpher(form=~Longitude+Latitude))
```

View the AIC values:
```{r}
AIC(model_corExp, model_corGaus, model_corLin, model_corRatio, model_corSpher)
```


`model_corExp` has the lowest AIC value so it fits the data best.

<br>

**Challenge**

View the output of the model by passing it through `summary()`.

```{r}
#| eval: false
#| echo: false
summary(model_corExp)
```



<br>

**Challenge**

Compare the results of this model where spatial autocorrelation is accounted for with the original lm `model1` where it was not. What are the differences?

<details>
  <summary>**Answer**</summary>
```{r}
#| eval: false
summary(model1)
```

Only `Disease` was significant in the lm model. Now we conclude `Disease` **and** `Nutrition` is significant when autocorrelation is accounted for in the model.

</details>

<br>

## Cleaning seabirds

**Challenge**

It is useful to learn how to download datasets from various sources. Try downloading the seabird data from [Kaggle](https://www.kaggle.com/datasets/saurabhshahane/predicting-animal-behavior-using-gps/)

If you get stuck you can use this source but it only has a subset of the data - [seabird dataset](./data/smallseabirds.csv)


```{r}
#| echo: false
#| eval: false
# seabirds <- read.table(file = "data/seabirds.csv", header = TRUE, sep = ",") # too big to commit to github

# take a subset of data so it can run as dataset is massive
set.seed(123)  # Set a seed for reproducibility
sampled_seabirds <- seabirds[sample(nrow(seabirds), 10000, replace = FALSE), ]
# read this one out and make avaliable incase they have problems getting data from kaggle
write.csv(sampled_seabirds, "data/smallseabirds.csv", row.names = FALSE)

sampled_seabirds <- read.table(file = "data/smallseabirds.csv", header = TRUE, sep = ",")
sampled_seabirds$maxDepth <- sampled_seabirds$max_depth.m
sampled_seabirds <- subset(sampled_seabirds, select = -max_depth.m)  # change variable name
library(ncf) 
model1 <- lm(maxDepth ~ species, data=bigseabirds)
summary(model1)
model2 <- lm(maxDepth ~ species, data=sampled_seabirds)
summary(model2)
correlog_object <- spline.correlog(sampled_seabirds$lat, sampled_seabirds$lon, residuals(model2), resamp=0, latlon=TRUE)
plot(correlog_object)
# no spatial autocorrelation so would decide not to go any further.
```

This data is quite large. In this case you might find it easier to make a data frame only containing the variables you need `lat`, `lon`, `species`, `max_depth.m`.

<br>

The data also needs cleaning. Practice renaming the variable `max_depth.m` to `maxDepth`.

<br>

Now run an analysis to understand if the data is spatially autocorrelated.

Then decide if you need to control for spatial autocorrelation when you test the effect of the `species` on the `maxDepth` dived.

<br>

<button type="button" class="btn btn-success">

If you run into any unexpected problems take the time to think about the possible solutions and how to implement them.
</button>



<br>

<br>

References 

Hassall C, Sherratt TN (2011) Statistical inference and spatial patterns in correlates of IQ. Intelligence, 39, 303-310. 

<br>

Adapted from Christopher Hassall's Introduction to Spatial Statistics and
Mike Treglia's [Landscape Analysis and Modeling](https://mltconsecol.github.io/TU_LandscapeAnalysis_Documents/Assignments_web/Assignment07_Mantel_SpRegress.html)